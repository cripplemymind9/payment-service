// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment-service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReservePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReservePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReservePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReservePaymentRequestMultiError, or nil if none found.
func (m *ReservePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReservePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReservePaymentRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := ReservePaymentRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReservePaymentRequestMultiError(errors)
	}

	return nil
}

// ReservePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by ReservePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type ReservePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservePaymentRequestMultiError) AllErrors() []error { return m }

// ReservePaymentRequestValidationError is the validation error returned by
// ReservePaymentRequest.Validate if the designated constraints aren't met.
type ReservePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservePaymentRequestValidationError) ErrorName() string {
	return "ReservePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReservePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservePaymentRequestValidationError{}

// Validate checks the field values on ReservePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReservePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReservePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReservePaymentResponseMultiError, or nil if none found.
func (m *ReservePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReservePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ReservePaymentResponseMultiError(errors)
	}

	return nil
}

// ReservePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by ReservePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type ReservePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservePaymentResponseMultiError) AllErrors() []error { return m }

// ReservePaymentResponseValidationError is the validation error returned by
// ReservePaymentResponse.Validate if the designated constraints aren't met.
type ReservePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservePaymentResponseValidationError) ErrorName() string {
	return "ReservePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReservePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservePaymentResponseValidationError{}

// Validate checks the field values on CompensatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensatePaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensatePaymentRequestMultiError, or nil if none found.
func (m *CompensatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CompensatePaymentRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CompensatePaymentRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompensatePaymentRequestMultiError(errors)
	}

	return nil
}

// CompensatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CompensatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CompensatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensatePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensatePaymentRequestMultiError) AllErrors() []error { return m }

// CompensatePaymentRequestValidationError is the validation error returned by
// CompensatePaymentRequest.Validate if the designated constraints aren't met.
type CompensatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensatePaymentRequestValidationError) ErrorName() string {
	return "CompensatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompensatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensatePaymentRequestValidationError{}

// Validate checks the field values on CompensatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensatePaymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensatePaymentResponseMultiError, or nil if none found.
func (m *CompensatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CompensatePaymentResponseMultiError(errors)
	}

	return nil
}

// CompensatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CompensatePaymentResponse.ValidateAll() if the
// designated constraints aren't met.
type CompensatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensatePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensatePaymentResponseMultiError) AllErrors() []error { return m }

// CompensatePaymentResponseValidationError is the validation error returned by
// CompensatePaymentResponse.Validate if the designated constraints aren't met.
type CompensatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensatePaymentResponseValidationError) ErrorName() string {
	return "CompensatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompensatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensatePaymentResponseValidationError{}
