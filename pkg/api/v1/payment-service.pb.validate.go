// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment-service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReserveUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveUserBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveUserBalanceRequestMultiError, or nil if none found.
func (m *ReserveUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReserveUserBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := ReserveUserBalanceRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReserveUserBalanceRequestMultiError(errors)
	}

	return nil
}

// ReserveUserBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveUserBalanceRequest.ValidateAll() if the
// designated constraints aren't met.
type ReserveUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveUserBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveUserBalanceRequestMultiError) AllErrors() []error { return m }

// ReserveUserBalanceRequestValidationError is the validation error returned by
// ReserveUserBalanceRequest.Validate if the designated constraints aren't met.
type ReserveUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveUserBalanceRequestValidationError) ErrorName() string {
	return "ReserveUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveUserBalanceRequestValidationError{}

// Validate checks the field values on ReserveUserBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveUserBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveUserBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveUserBalanceResponseMultiError, or nil if none found.
func (m *ReserveUserBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveUserBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ReserveUserBalanceResponseMultiError(errors)
	}

	return nil
}

// ReserveUserBalanceResponseMultiError is an error wrapping multiple
// validation errors returned by ReserveUserBalanceResponse.ValidateAll() if
// the designated constraints aren't met.
type ReserveUserBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveUserBalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveUserBalanceResponseMultiError) AllErrors() []error { return m }

// ReserveUserBalanceResponseValidationError is the validation error returned
// by ReserveUserBalanceResponse.Validate if the designated constraints aren't met.
type ReserveUserBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveUserBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveUserBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveUserBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveUserBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveUserBalanceResponseValidationError) ErrorName() string {
	return "ReserveUserBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveUserBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveUserBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveUserBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveUserBalanceResponseValidationError{}

// Validate checks the field values on CompensateUserBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateUserBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateUserBalanceRequestMultiError, or nil if none found.
func (m *CompensateUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CompensateUserBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CompensateUserBalanceRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompensateUserBalanceRequestMultiError(errors)
	}

	return nil
}

// CompensateUserBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by CompensateUserBalanceRequest.ValidateAll() if
// the designated constraints aren't met.
type CompensateUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateUserBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateUserBalanceRequestMultiError) AllErrors() []error { return m }

// CompensateUserBalanceRequestValidationError is the validation error returned
// by CompensateUserBalanceRequest.Validate if the designated constraints
// aren't met.
type CompensateUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateUserBalanceRequestValidationError) ErrorName() string {
	return "CompensateUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateUserBalanceRequestValidationError{}

// Validate checks the field values on CompensateUserBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateUserBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateUserBalanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompensateUserBalanceResponseMultiError, or nil if none found.
func (m *CompensateUserBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateUserBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CompensateUserBalanceResponseMultiError(errors)
	}

	return nil
}

// CompensateUserBalanceResponseMultiError is an error wrapping multiple
// validation errors returned by CompensateUserBalanceResponse.ValidateAll()
// if the designated constraints aren't met.
type CompensateUserBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateUserBalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateUserBalanceResponseMultiError) AllErrors() []error { return m }

// CompensateUserBalanceResponseValidationError is the validation error
// returned by CompensateUserBalanceResponse.Validate if the designated
// constraints aren't met.
type CompensateUserBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateUserBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateUserBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateUserBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateUserBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateUserBalanceResponseValidationError) ErrorName() string {
	return "CompensateUserBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateUserBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateUserBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateUserBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateUserBalanceResponseValidationError{}
